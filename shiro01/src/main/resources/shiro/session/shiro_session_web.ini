[main]
authc.loginUrl=/index.jsp
# ==会话管理器==

# DefaultWebSecurityManager使用的默认实现，用于Web环境，其直接使用Servlet容器的会话
# sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager

# sessionManager创建会话Cookie的模板
sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
# 设置Cookie名字,默认为JSESSIONID
sessionIdCookie.name=sid
# 设置Cookie的域名,默认空(即当前访问的域名)
# sessionIdCookie.domain=sishuok.com
# 设置Cookie的路径,默认空(即存储在域名根下)
# sessionIdCookie.path=
# 设置Cookie的过期时间,秒为单位(默认-1表示关闭浏览器时过期Cookie)
sessionIdCookie.maxAge=1800
# 如果设置为true,则客户端不会暴露给客户端脚本代码,使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击;此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持
sessionIdCookie.httpOnly=true

# 用于Web环境的实现,可以替代ServletContainerSessionManager,自己维护会话,直接废弃了Servlet容器的会话管理
sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
# 设置会话Cookie模板
sessionManager.sessionIdCookie=$sessionIdCookie
# 是否启用/禁用Session Id Cookie,默认是启用的;如果禁用后将不会设置Session Id Cookie,即默认使用了Servlet容器的JSESSIONID,且通过URL重写(URL中的";JSESSIONID=id"部分)保存Session Id
sessionManager.sessionIdCookieEnabled=true

# ==会话监听器==

sessionListener1=com.bo.shiro.web.listener.MySessionListener1
sessionListener2=com.bo.shiro.web.listener.MySessionListener2
# 设置会话监听器
sessionManager.sessionListeners=$sessionListener1,$sessionListener2

# ==会话存储/持久化== 

sessionDAO=com.bo.shiro.session.dao.MySessionDAO
# 设置Session缓存名字，默认就是shiro-activeSessionCache(与缓存配置文件配置的名称对应)
sessionDAO.activeSessionsCacheName=shiro-activeSessionCache
# 设置会话ID生成器(默认就是JavaUuidSessionIdGenerator)
sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
sessionDAO.sessionIdGenerator=$sessionIdGenerator
sessionManager.sessionDAO=$sessionDAO

cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
# 设置ehcache缓存的配置文件
cacheManager.cacheManagerConfigFile=classpath:ehcache/shiro-ehcache.xml
# 设置SecurityManager的cacheManager,会自动设置实现了CacheManagerAware接口的相应cacheManager对象，如SessionDAO的cacheManager
securityManager.cacheManager = $cacheManager

# ==会话验证==

# 默认会话验证调度器,其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期
#sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
# 设置调度时间间隔,单位毫秒(默认就是1小时)
#sessionValidationScheduler.interval = 100000
# 设置会话验证调度器进行会话验证时的会话管理器
#sessionValidationScheduler.sessionManager=$sessionManager

# Quartz会话验证调度器
#sessionValidationScheduler=org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler
#sessionValidationScheduler.sessionValidationInterval = 10000
#sessionValidationScheduler.sessionManager=$sessionManager

# 自定义会话验证调度器
sessionValidationScheduler=com.bo.shiro.session.scheduler.MySessionValidationScheduler
# 设置调度时间间隔，单位毫秒，默认就是1小时
sessionValidationScheduler.interval = 10000
# 设置会话验证调度器进行会话验证时的会话管理器
sessionValidationScheduler.sessionManager=$sessionManager

# DefaultWebSessionManager:设置会话的全局过期时间(以毫秒为单位),默认30分钟,可单独为每个会话设置超时时间;如果使用ServletContainerSessionManager进行会话管理,Session的超时依赖于底层Servlet容器的超时时间,可以在web.xml中配置其会话的超时时间
sessionManager.globalSessionTimeout=1800000
# 是否开启会话验证器(默认是开启的)
sessionManager.sessionValidationSchedulerEnabled=true
# 设置会话验证调度器,默认就是使用ExecutorServiceSessionValidationScheduler
sessionManager.sessionValidationScheduler=$sessionValidationScheduler
# 会话过期时是否删除过期的会话(默认true)
sessionManager.deleteInvalidSessions=true

# ==sessionFactory==

sessionFactory=com.bo.shiro.session.mgt.OnlineSessionFactory
sessionManager.sessionFactory=$sessionFactory

securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false
securityManager.sessionManager=$sessionManager

[filters]
online=com.bo.shiro.session.filter.OnlineSessionFilter
online.forceLogoutUrl=/static/login.jsp
online.sessionDAO=$sessionDAO

[users]
# 说明:这里的密码是MD5加密之后的密码(12345)
bo=827ccb0eea8a706c4c34a16891f84e7b,admin
lin=827ccb0eea8a706c4c34a16891f84e7b

[roles]
admin=user:*,menu:*

[urls]
/logout=logout
/static/home.jsp=authc,online
/**=anon